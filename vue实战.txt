
TODO: 如果想卸载或者安装 Node.js 和 NPM, 这是需要做以下的注意点
    node 和 npm 卸载和安装, 切换到 root 用户直接卸载和安装就OK了

---------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------ 第1章 初识vue -------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
什么是vue?
    vue 是一种前端框架!

学习 vue 需要学习什么?
    学习 vue 即学习 vue 框架中的各种规则!  

vue 的特性: 
    1、数据驱动前端视图的更新和变化! 数据驱动 DOM 是 vue 的核心理念, 除非有必要不要自己操作 DOM 对象, 统一交给 vue 处理是核心理念!
    2、双向数据绑定

MVVM 模式: 参考 vue_inaction_chapter_01 中的 01_MVVM模式!

---------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------ 第2章 数据绑定和第一个vue应用 ------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
导入 vue 的 js 文件!

Model ModelView View 之间的关系去看 MVVM 图示!

Vue 的生命周期: created, mounted, beforeDestory 三个生命周期!

常用标签:
    v-model: 是进行数据双向绑定中的必要元素

    v-html: 绑定数据将以 html 数据的方式进行展示!

    v-pre: 忽略掉当前标签以及子标签的编译过程!

    {{}} 内部可以使用简单的表达式, 不能使用流程控制语句, 也不能使用定义语句! 只允许使用简单表达式语句!

过滤器:
    在 {{}} 中除了使用 vue data 中的 属性之外, 也可以使用 | 管道进行拼接

    具体用法如下:
    const app = new Vue({
        el: '',
        data: {name : 'zhangsan'},
        filters: {
            filter1: function(value) {
                return ...;
            },
            filter2: function(value) {
                return ...;
            }
        }
    });

    {{name | filter1 | filter2}}, 当然也可以如下使用:
    {{name | filter1(arg1) | filter2(arg1, arg2)}} 传递的参数, 对应 filter function 的第二个参数, 第三个参数, 参数从第二个开始对应! 

指令与事件:
    指令 v- 为前缀的东西, 前面使用过 v-model, v-html, v-pre 等!

    v-if: 控制显示和隐藏    <span v-if="show">是否显示span标签</span>

    v-bind 指令: 制定 <a v-bind:href="">链接</a>  <img v-bind:src="" />

    v-on:click="" 为元素添加事件, 使用方式如下:
        <span v-if="show">是否显示span标签</span>
        <button v-on:click="handleClose">点击隐藏</button>
        methods: {
            handleClose: function() {
                this.show = flase;
            }
        }
        或者直接使用如下: 推荐使用上面的方式!
        <span v-if="show">是否显示span标签</span>
        <button v-on:click="show = flase">点击隐藏</button>

    总结: vue 中的 data 和 methods 是一样的地位, 可以在 vue 的内部和外部使用! 调用方式举例:
    console.log(app.mine.a);
    console.log(app.init());
    
语法糖:
    这里的语法糖就是简写形式!
    v-bind:href="", 可以简写成 :href=""
    v-bind:src="", 可以简写成 :src=""

    v-on:click="" 可以简写成 @click=""

    总结语法糖的用法: 在这里就是起到简化书写代码的作用, 目前学了两种 v-bind 和 v-on, v-bind 可以简化成 :, v-on 可以简化成 @

---------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------ 第3章 计算属性 -------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
计算属性的提出是因为 在 {{}} 中如果属性的计算比较复杂, 影响可读性, 这时将属性计算提取出来 放在一个专门进行属性计算的地方用来公用!

举例:
{{text.split(",").reverse().join(",")}} 可以将 text 的属性计算放在, computed: {} 中进行计算, 内部定义 functionName: function() {} 就可以了

回顾前面时间格式化 filters 中的 function 是不能获取到 this的, 这时候 filters 里面的方法也不能直接使用 methods 中的方法!
如果 filters 中想使用 methods 中的方法, 这时候可以使用 beforeCreated() {that = this} 来获取 this, 然后 filter 内部就可以使用 that 了!

模拟 java 中的 set get 案例!

多个 vue 实例之间 数据是可以共享的, 在 app2 中可以使用 app1 中的数据进行 计算属性 可以举例说明:
const app1 = new Vue({
    el: '#app1',
    data: {
        text: 'abc,def'
    },
    computed: {}
});
const app2 = new Vue({
    el: '#app2',
    data: {
        text: 'abc,def'
    },
    computed: {
        reverseText: function() {
            return app1.text.split(",").reverse().join(",");
        }
    }
});

计算属性和方法都可以实现 相同的功能, 那么二者有什么区别呢? 
    computed 是基于 data 缓存而存在的, data 不发生变化就不重新计算, methods 每次都直接调用计算! 这个例子先不举了, 因为不太好展示!

---------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------ 第4章 v-bind 及class 与 style 绑定 -----------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
v-bind 在前面第二章中有语法糖的概念, 就是简写形式!

v-bind 扩展使用 class 是标签属性的另外一个主要用处之一

class 绑定形式:
    对象语法:
        <div id="app2" class="static" :class="{'active' : isActive, 'error' : isError}">第2个div</div>或者
        <div id="app2" class="static" :class="classes">第2个div</div>
        const app2 = new Vue({
            el: '',
            data: {
                isActive: true,
                isError : false
            },
            computed: {
                classes: function() {
                    return {
                        'active' : this.isActive, 'error' : this.isError
                    }
                }
            }
        });

        渲染后的结果: <div id="app2" class="static active">第2个div</div>

        特别注意: 在对象语法中 {key : value}, key 只能是字符串, 不能是函数或者表达式 等需要计算的未定值!
    
    数组语法:
        const app5 = new Vue({
            el: '#app5',
            data: {
                isActive: true,
                isError: true,
                mineCls: 'mine-class'
            },
            computed: {
                classes : function() {
                    return ['static', {'active' : this.isActive}, {'error' : this.isError}, this.mineCls]
                }
            }
        });

在 组件上使用 class : 因为者需要使用到 第7章中的 组件知识, 这里先标记一下, 暂时跳过!

绑定 style 样式, 和绑定 class 样式是一样的, 也有 两种语法: 对象语法和数组语法!
    在现实开发中, 数组语法不常用, 因为 data : {style: {color : ''}} 等 样式 都可以写在一个对象中!

---------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------- 第5章 内置指令 -----------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
基本指令: 
    无表达式指令:
        v-cloak 这是解决 vue 没有被加载完时, html 元素已经加载, 这时候会有 {{message}} 这种 vue 源码被展示出来, v-cloak 解决就OK了!
        v-once 元素和组件(组件的所有子节点) 只加载一次, 不会随着数据的变化重新加载, 被视为静态内容!

条件渲染指令:
    v-if v-else-if v-else 条件判断指令
        在 vue 中 === 表示 等于, 这种比较比较严格, 不进行类型的转换!
        引入 <template></template> 元素, 这种元素只会渲染包裹的元素, 但不会展示这种元素!
    v-show 指令: 用来是否展示元素的指令
        TODO 特别注意: v-show 指令不能使用在 template 标签上, 验证以后不起作用!

    v-if 和 v-show 指令之间的区别: 前者只有条件为真才进行渲染, 后者无论条件是否为真都进行渲染(条件为假时, style="display: none;")   
    <p style="display: none;">标签上使用 v-show 指令!</p> 

列表渲染 v-for :
    对象属性遍历举例: <p v-for="(value, key, index) in user">{{index+1}} --- {{key}} --- {{value}}</p>
    数组进行遍历举例: <li v-for="(book, index) in books">{{index+1}} --- {{book.name}} --- {{book.author}}</li>
    整数进行遍历举例: <span v-for="n in 10">{{n}} &nbsp;&nbsp;</span>

    数组更新的方法:
    push(), pop(), shift(), unshift(), splice(), sort(), reverse()

    不更新原始数组, 但返回数组的方法:
    filter(), concat(), slice()

    /**************************************** 以下方法会改变 原始数组! ****************************************/
    末尾添加一个对象
    app8.books.push(
        {
            name : 'DesignPatterns',
            author : 'Erich Gamma、Richard Helm、Ralph Johnson、John Vlissides'
        }
    );
    末尾删除一个对象
    app8.books.pop();
    
    头部添加一个对象
    app8.books.unshift(
        {
            name : 'DesignPatterns',
            author : 'Erich Gamma、Richard Helm、Ralph Johnson、John Vlissides'
        }
    );

    头部删除一个对象
    app8.books.shift();

    
     方法简介: 可以用来替换/删除/添加数组内某一个或者几个值（该方法会改变原始数组）
     splice(index,len,[item])
     index:数组开始下标, len: 替换/删除的长度 0表示添加, item:替换的值, 删除操作的话 item 为空
    
    在 index = 1 的位置插入 对象!
    app8.books.splice(1, 0, {
        name : 'DesignPatterns',
        author : 'Erich Gamma、Richard Helm、Ralph Johnson、John Vlissides'
    });

    删除 index = 1 的对象
    app8.books.splice(1, 1);

    修改 index = 1的对象 为 新对象 
    app8.books.splice(1, 1, {
        name : 'DesignPatterns',
        author : 'Erich Gamma、Richard Helm、Ralph Johnson、John Vlissides'
    });

    将数组改为长度为 len, 使用方式为 splice(len)
    app8.books.splice(2);

    sort() 方法, 自定义排序方法
    app8.numbers.sort(function(a, b) {
        return a - b;
    });

    reverse() 翻转方法
    app8.numbers.sort(function(a, b) {return a - b;}).reverse();

    /************************************* 以下方法不会改变 原始数组, 但会返回一个数组 ***************************************/
    filter() 过滤原始数组返回一个新数组, 原始数组不改变
    var arr = app8.numbers.filter(function(a) {
        return a > 10;
    });
    app8.numbers = arr;

    concat() 拼接数组
    var newarr = [100, 200, 11, 88];
    app8.numbers = app8.numbers.concat(newarr);

    slice(beginIndex, endIndex) 截取函数, 截取 包含 beginIndex 但不包含 endIndex;
    var minearr = app8.numbers.slice(1, 4);
    console.log(minearr);

方法与事件:
    v-on 使用语法糖, 这里只使用了一个 click 方法的案例, 修饰以后再说!

购物车案例实战 并完成习题1

---------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------- 第6章 表单和 v-model ----------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
常见表单控件的使用: 
    单选、多选、下拉选择、输入框等, 用它们可以完成数据的录入、校验、提交等。

单选按钮 radio 和 多选按钮 checkbox 都用到 v-model="", 都需要 data: {} 中定义

选择列表: 分为单选和多选两种

绑定值: 使用方式为 :value="" data 中去定义就OK了!

修饰符:

---------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------- 第7章 组件详解 -----------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
组件分为: 全局注册, 局部注册!

组件的使用:

    全局注册的组件: 在 各个vue实例中 都可以使用!
        Vue.component("component-name", {       // component-name 最好使用 小写字母 + 横线分割的方式!
            // 选项
            template: '<div>全局注册的组件内容</div>'
        }); 

    局部注册的组件:
        var Child = {template: '<div>局部注册的组件内容</div>'}
        const app = new Vue({
            el: '#app',
            data: {},
            components: {
                'my-component' : Child
            }
        });

    注意一些特殊的 DOM 元素如果使用 组件要使用 is="组件名称", 例如 <table> <ul> <ol> 等特殊的 DOM 元素!

组件数据:
    组件中使用 data, 注意要用 function() {return {}} 的方式使用!

    组件数据的传递: 组件标签属性值 传递给 组件内部, 如果想使用动态数据, 就先传递给 组件标签属性值, 往往用到 v-bind!

    TODO: 注意，在 javascript 中 对象和数组 是引用类型, 指向同一个内存空间, 所以 props 是对象和数组时, 在子组件内改变是会影响父组件的!

    数据验证:
        props 这时候就需要使用到 对象语法了!

        创建几个校验校验的组件案例!

组件通信:
    父组件向子组件数据流转使用 props 组件属性!

    子组件向父组件传递数据使用 this.$emit("event-name", param); // 使用 $emit(event-name, param)事件名称和参数!
    子组件向父组件传递数据使用 v-model

    FIXME: 暂时结论: 经验证: 子组件可以通过传递 v-on 调用父组件的方法, 而父组件不能调用子组件的方法!

    TODO: 实现一个数据双向绑定的 v-model 组件必须满足以下两条:
    1、在 组件内部使用 :value="value"
    2、在 组件内部使用 @input="" 方法! 实现方法为
    function(event) {
        this.$emit('input', event.target.value);
    }

    TODO: 非父子组件通信, 扩展为任意组件之间的数据交互, 使用 事件bus 和 以下方式!
    $emit('event-name', params) 注册事件! $on('event-name', function(params) {})消费事件! 值从 $emit() 传递到 $on();

    父链: 不推荐使用!
    this.$parent, 这里举个例子就OK了!

    子组件索引: this.$refs.索引名称.属性名称, 不推荐使用, 这里举个例子就OK了!

使用 slot 分发内容:
    核心思想: 再复杂的组件 也有以下三部分组成: props, event, slot!

    作用域: 父组件的数据 在父组件作用域编译, 子组件的数据 在子组件作用域编译!
    举例:
    <child-component>
        {{message}}         // message 就属于父组件的数据
    </child-component>

    单个 slot  
        举例: template: '<div><slot></slot></div>'

    具名 slot       
        举例: 在父组件中使用 <h2 slot="header">头部信息</h2>, 子组件中使用 <slot name="header"></slot>

    作用域 slot
        举例:
            在父组件中往往使用 template!
            <app5-component :books="books">
                <template slot="book" scope="props">
                    <li slot="book">{{props.book_name}} --- {{props.book_author}}</li>
                </template>
            </app5-component>

    访问 slot:
        this.$slots.default 默认slot
        this.$slots.header  具名slot

组件的高级用法:
    递归组件: v-if 条件限制
    内联模板: inline-template
    动态组件: <component :is="组件id"></component> 
    异步组件: 在webpack 和 .vue 中有更优雅的用法!

侦听器 watch:
    侦听数据变化的方法集合, 在 vue 中 和 methods 平级的! 
    写法格式如下: 监听哪个属性, 就用哪个属性作为方法名称!
    const app = new Vue({
        el: '',
        data: {
            username: '',
            student: {
                password: '123456'
            }
        },
        watch: {
            // TODO: 监听 哪个属性 就用 哪个属性 作为 方法名称! 参数顺序为 newVal, oldVal
            username: function(newVal, oldVal) {    
                console.log("newVal is :" + newVal + ", oldVal is :" + oldVal);
            },

            // TODO: 侦听对象的属性, 就用''括起来就可以了, 使用方式如下
            'student.password': function(newVal, oldVal) {
                console.log("newVal is :" + newVal + ", oldVal is :" + oldVal);
            },

            // TODO: 当然也可以使用对象方式的监听, 使用方式如下:
            student: {
                handler(newVal) {
                    console.log("newVal is :" + newVal + ", oldVal is :" + oldVal);
                },
                // 开启对象深度监听, 对象格式则要设置为 true
                deep: true,

                // 是否立马监听, 默认为 flase, 一般不需要设置为 true, 看需求而来!
                // immediate: true
            }
        }
    });  

ajax 和 axios 的使用:
    ajax 的使用方式:
        1、引入 jquery 文件
        2、使用格式如下(只列举最基本的使用)
        $.ajax({
			type : 'post',						//请求方式
			url  : 'UserServlet?status=save',	//访问地址
			cache: false,						//是否清空缓存
			data : $("#myForm").serialize(),	//向后台传递数据
			dataType : 'text',					//服务器返回的数据类型
			success : function(result){
				var result = $.parseJSON(result);
				$.messager.show({
					title : result.status,
					msg : result.message
				});
			},
		 	error : function(result){
		 		var result = $.parseJSON(result);
				$.messager.show({
					title : result.status,
					msg : result.message
				});
		 	}
		});

    axios 的使用:
        1、引入 axios 库文件 
        2、使用格式如下:
        axios({
            method: 'post',             // 请求方式
            url: '/user/12345',         // 服务器地址
            data: {                     // 请求数据
                firstName: 'Fred',
                lastName: 'Flintstone'
            }
        }).then(function(response) {
                                        // 处理请求返回值!
        });

其他:
    1、异步更新队列的问题, 使用到 $nextTick()
    2、script 使用 type="text/x-template" 书写 html 就可以了!
    3、手动挂载组件  new Vue({}).$mount('#app');

案例: 开发一个 数字输入框 组件!

---------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------- 第8章 自定义指令 --------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
自定义指令的分类:
    全局注册指令: 
        Vue.directive('app-command', {
            // 选项
        });
    局部注册指令:
        const app = new Vue({
            el: '#app',
            data: {},
            directive: {
                'app-command' : {
                    // 选项
                }
            }
        });

具体选项参考: 01_自定义指令选项.png

---------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------- 第9章 Render函数 -------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
暂时不研究!



---------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------ 第10章 webpack的使用 ------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
webpack 使用场景: 主要是 单页面富应用(SPA), SPA通常是由一个 html 页面 和 一堆按需加载的 js 文件组成, html 可能会非常简单, 不同时刻加载不同 js

ES6 语法: import, export 
    
    export 导出案例, 每一个模块就是一个 js 文件, 内部定义的变量外部是无法获取的, 每个变量都有自己的作用域!

    // config.js
    var Config = {
        version: "1.0.0";
    }
    export {Config}

    export var Config = {
        version: "1.0.0"
    }

    // 导出函数案例
    // add.js
    export function add(a, b) {
        return a + b;
    }

    前面的导出都为知道 js 文件中的 变量名称, 如果不想知道可以使用默认情况, 案例如下:
    // config.js
    export default {
        version: "1.0.0"
    }

    // add.js
    export default function(a, b) {
        return a + b;
    }

    模块导出后再在使用的地方导入:
    // main.js 
    import {Config} from './config.js';
    import {add} from './add.js'

    // 导入默认变量的情况
    import conf from './config.js';
    import {Add} from './add.js';

    如果你使用 npm 安装了一些默认使用的库, 常用的导入如下:
    import Vue from 'vue';
    import $ from 'jquery';

    这样在 js 文件中就可以使用 Vue 和 $ 这两个模块了!


webpack 基础配置:

准备: 确保本地已经安装了 Node.js 和 NPM;
安装 webpack 和 webpack-dev-server
    1、创建一个空目录 vue_inaction_chapter_10 执行 npm init 指令, 生成 package.json
    2、安装 webpack
        npm install webpack --save-dev

    3、配置 webpack
        在 vue_inaction_chapter_10 目录下创建 webpack.config.js

    4、安装 webpack-dev-server    
        npm install webpack-dev-server --save-dev

    5、配置 webpack-dev-server
        在 package.json 中修改如下
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
            "dev":  "webpack-dev-server --host 127.0.0.1 --port 8888 --open --config webpack.config.js"
        }

    6、在 根目录下 创建一个 src 文件夹, src 文件夹习创建 文件 index.html 和 index.js 文件!
        配置 webpack.config.js 文件的 输入 和 输出
            // 自定义打包入口文件
            entry: path.join(__dirname, './src/index.js'),

            // 自定义打包输入文件
            output: {
                path: path.join(__dirname, './dist'),    // 输出文件目录
                publicPath: './dist',                    // 指定资源文件引用的目录, 如果资源放在 CDN 上, 可填写 CDN 地址!
                filename: 'js/main.js'                   // 文件名称
            },
    

        TODO: 注意点: 如果感觉配置有问题, 可以先用 dev 为 webpack 生成一下文件录看下, 然后再配置!
            "scripts": {
                "test": "echo \"Error: no test specified\" && exit 1",
                "dev":  "webpack"
            }

        在 "dev": "webpack serve" 时使用, 根据 npm run dev 提示配置, 具体提示如下:
            publicPath: '/dist/',  // webpack.config.js 中的配置           TODO: pathA 
            <i> [webpack-dev-middleware] wait until bundle finished: /
            asset js/main.js 243 KiB [emitted] (name: main)               TODO: pathB  

        TODO: http 访问页面的情况下, script src="publicPath + 生成的js文件地址" 即为 src="pathA + pathB"

        TODO: 推荐: 在 package.json 中的 output 中尽量使 path 和 publicPath 一致!
    
    7、执行 npm run dev 就可以了!

.vue文件:
    文件组成: <template></template>, <script></script>, <style></style> 三部分!
    <style scoped> 中的 scoped 属性, 表示当前css样式, 只对当前这个组件有效, 否则影响整个页面!

    TODO: .vue文件的固定写法如下:
        <template></template>
        <script>
            export default {

            }
        </script>
        <style scoped>
        </style>

使用 .vue文件 必须使用插件, vue-loader 和 vue-style-loader
    使用的 plugins 和 loader 比较多:
    npm install --save vue
    npm install --save-dev vue-loader
    npm install --save-dev vue-style-loader
    npm install --save-dev vue-template-compiler
    npm install --save-dev vue-hot-reload-api
    npm install --save-dev babel
    npm install --save-dev babel-loader
    npm install --save-dev babel-core
    npm install --save-dev babel-plugin-transform-runtime
    npm install --save-dev babel-preset-es2015
    npm install --save-dev babel-runtime        

---------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------- webpack 前端工程化的案例 ------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
参考工程: vue_001_webpack_change_rows_color

通过一个案例了解 webpack, 并安装配置 webpack; 需求: 创建一个 隔行变色的 li 展示

1、创建一个 空文件夹 vue_001_webpack_change_rows_color, 执行 npm init -y, 
 　初始化包管理配置文件 package.json
2、在 vue_001_webpack_change_rows_color 文件夹下 创建 src 目录
3、在 src 文件夹下 创建 index.html 和 index.js
4、在 vue_001_webpack_change_rows_color 文件夹下 执行命令 npm install jquery -S 安装 jQuery
5、编写 index.js 并在 index.html 中引用 index.js

问题:
    index.js 中 import $ from 'jquery' 有语法问题!

webpack 的安装和配置
    webpack 安装: 
        在 vue_001_webpack_change_rows_color 执行命令 
        npm install webpack@5.42.1 webpack-cli@4.10.0 -D

    webpack 配置:
        1、在 vue_001_webpack_change_rows_color 目录下 创建 webpack.config.js 的 webpack 配置文件, 并初始化
            module.exports = {
                // 两种可选模式: development 和 production
                mode : 'development'
            }

        TODO: 这里注意 如果想看直接生成的过程, 先配置为 "dev": "webpack" 
        2、在 package.json 的 scripts 节点下 新增 dev 脚本如下:
            "scripts": {
                "test": "echo \"Error: no test specified\" && exit 1",
                "dev": "webpack" 
            }

        3、在 vue_001_webpack_change_rows_color 目录下 执行命令: num run dev 
            yangjianwei@yangjianweideMacBook-Pro vue_001_webpack_change_rows_color % npm run dev
            > vue_001_webpack_change_rows_color@1.0.0 dev /Users/yangjianwei/VisualProjects/vue_001_webpack_change_rows_color
            > webpack

            asset main.js 325 KiB [emitted] (name: main)
            runtime modules 937 bytes 4 modules
            cacheable modules 283 KiB
            ./src/index.js 235 bytes [built] [code generated]
            ./node_modules/jquery/dist/jquery.js 283 KiB [built] [code generated]
            webpack 5.42.1 compiled successfully in 329 ms
            yangjianwei@yangjianweideMacBook-Pro vue_001_webpack_change_rows_color % 

            解释: 在执行命令 npm run dev 后, 将 index.js 和 jquery.js 合并为 main.js 了

        
        4、修改 index.html 中的 script 引用改为 dist 文件夹下的 main.js

        5、如果修改 index.js 中的东西 都得重新执行webpack命令 npm run dev 


webpack 的基本使用:
    在 webpack4.x 和 webpack5.x 的版本中, 有如下默认约定:
        默认的打包入口文件为: src/index.js
        默认的打包输出文件为: dist/main.js
    在 webpack.config.js 文件中可以修改以上的默认约定!

    webpack 的自定义配置: 修改 webpack.config.js 文件
        指定打包入口的文件: 
        entry : ''
        
        指定打包输出的文件: 
        output : {
            path : 
            filename: 
        }

        举例: 
        // 自定义打包入口文件
        entry: path.join(__dirname, './src/index1.js'),

        // 自定义打包输入文件
        output: {
            path: path.join(__dirname, './dist'),   // 输出文件目录
            filename: 'bundle.js'                   // 文件名称
        }

修改 index.js 文件 后 带来了新问题, 就是不能渲染, 因为 index.js 和 jquery.js 都被合并到 dist/main.js 文件了, 
必须重新 运行 npm run dev 引入 webpack 插件的使用

webpack 相关插件的安装配置和使用
    webpack插件 主要有两个: webpack-dev-server 和 html-webpack-plugin 
    webpack-dev-server 插件: 是修改了 src/index.js 文件后 进行自动运行 npm run dev 的功能
        安装: 
            在项目目录下执行如下命令
            npm install webpack-dev-server@4.11.1 -D

        配置:
            在 package.json 文件中的 scripts dev属性 添加 serve
            "scripts": {
                "test": "echo \"Error: no test specified\" && exit 1",
                "dev": "webpack serve"
            },

        再次执行: 
            npm run dev 重新进行项目的打包
        
        使用方式: 
            在 浏览器中 http://localhost:8080 查看页面

            问题: 出现 Can not GET 问题! 
            在 webpack.config.js    module.exports 中添加如下属性:
            devServer: {
                // contentBase: __dirname, -- 注意，这种写法已弃用
                static: {
                    directory: path.join(__dirname, "/"),
                }
            }

        插件原理:
            webpack-dev-server 会在 根目录下生成一个 main.js 文件, 因此 index.html 中必须要 引用 /main.js 

    html-webpack-plugin 插件: 通过此插件可以定制 index.html 页面的内容
        安装:
            npm install html-webpack-plugin -D
        配置: 
            在 webpack.config.js 中添加配置
            1、导入 html 插件, 得到一个构造函数
                const HtmlPlugin = require('html-webpack-plugin');
            2、创建 html 插件对象
                const htmlPlugin = new HtmlPlugin({
                    template: 'src/index.html',     // 指定原文件的存放路径
                    filename: './index.html'        // 指定生成文件的存放路径
                });
            3、在 webpack.config.js    module.exports 中引用插件对象
                plugins: [htmlPlugin]

webpack 中的 loader (加载器):
    webpack 默认情况下只能处理 .js 文件, 不能处理 其他后缀的文件, 这时候就需要使用到 webpack 中的各种 loader 

    案例: src -> css -> index.css 文件的使用
        这里使用到两种 loader 来处理 css 文件:

        安装:
            npm install style-loader css-loader -D

        配置: 
            在 webpack.config.js 中添加 module -> rules 数组中添加 loader 规则
            module: {
                rules: [
                    {test: /\.css$/, use: ['style-loader', 'css-loader']}
                ]
            }

        注意点: 
        rules 中配置的 loader 必须是有顺序的, 因为 loader 的使用顺序是 从后往前使用的(这是 webpack 使用loader 的规则)

    案例: src -> css -> index.less 文件的使用
        使用 三种 loader 处理 .less 文件, 且必须 安装 less 

        安装: 
            npm install less-loader less -D

        配置:
            在 webpack.config.js 中添加 module -> rules 数组中添加 loader 规则
            module: {
                rules: [
                    {test: /\.less$/, use: ['style-loader', 'css-loader', 'less-loader']}
                ]
            }


    案例: src -> images -> ai.png
        处理 src 为 url 的 loader

        安装:
            npm install url-loader file-loader  -D

        配置:
            在 webpack.config.js 中添加 module -> rules 数组中添加 loader 规则
            module: {
                rules: [
                    // limit 是指定文件的大小, limit 单位是字节(byte)
                    {test: /\.jpg|png|gif$/, use: ['url-loader?limit=22229']}
                ]
            }

    案例: webpack 处理高级 js 语言, 这时候也需要使用到 对应的 loader

        在 index.js 中 插入如下相关的高级 js 语法, 这时候需要 babel-loader 进行加载

        安装:
            npm install babel-loader @babel/core @babel/plugin-proposal-decorators -D

        配置:
            1、在 webpack.config.js 中添加 module -> rules 数组中添加 loader 规则
            module: {
                rules: [
                    // limit 是指定文件的大小, limit 单位是字节(byte)
                    {test: /\.js$/, use: ['babel-loader']}
                ]
            }
            2、在 项目根目录下创建 babel.config.js 配置文件, 定义
            module.exports = {
                // webpack 使用高级 js 语法时, 会使用到 babel-loader 插件, 当前插件就会使用到 plugins 中的插件!
                plugins: [
                    ["@babel/plugin-proposal-decorators", { "legacy": true }]
                ]
            }


webpack 打包发布:
    首先在 package.json 的 scripts 中添加一个 build
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
            "dev": "webpack serve",
            "build": "webpack --mode production"
        },

    执行 npm run build 就会在 dist 目录下生成 html 和 相关的 js

    管理两种文件: js 文件生成到 dist/js 中, images 生成到 dist/images 文件夹下
    webpack.config.js 中配置:
        
        生成 main.js 的目录变为 ./dist/js
        output: {
            path: path.join(__dirname, './dist/js'),    // 输出文件目录
            filename: 'main.js'                         // 文件名称
        },

        url-loader 中使用 outputPath=images
        { test: /\.jpg|png|gif$/, use: ['url-loader?limit=10000&outputPath=images'] },    // 当图片的大小 <= limit(单位字节) 时才会转成 base64 的形式

    然后将 生成的文件 整体交给 后端人员就OK了！

问题: 
    每次生成文件 都把 dist 目录下的 文件删除, 有没有一个插件能自动清除 dist 目录的插件呢?

    根据问题引入插件: clean-webpack-plugin
        安装:
            npm install clean-webpack-plugin -D

        配置:
            在 webpack.config.js 文件中配置使用
            // clean-webpack-plugin 的使用 默认将 dist 文件夹下的文件自动删除!
            const { CleanWebpackPlugin } = require('clean-webpack-plugin');
            const cleanWebpackPlugin = new CleanWebpackPlugin();

            // 使用 webpack 时会加载和使用的插件
            plugins: [htmlPlugin, cleanWebpackPlugin],

    再次执行 npm run build 就OK了(可以通过在 dist 文件夹下创建文件 aa.txt 执行后可以查看是否删除)

SourceMap 的使用: 
    便于出错时, 生成文件中错误的行号 直接翻译为 源代码中有错误的行号, 这样便于开发和调试!
    使用方式:
    在 webpack.config.js 中配置:
    // 在 development 模式下使用 SourceMap 能够将 生成的js文件中的错误行号 翻译成 源码中错误的行号, 使用 eval-source-map
    // 在 production  模式下使用 devtool 使用 nosources-source-map 既可以定位错误行数, 又不暴漏源码!
    // devtool: 'eval-source-map',      // development 模式下
    devtool: 'nosources-source-map',    // production  模式下使用 或者 直接关闭 devtool


webpack 配置扩展: 
    如果想使用 @ 表示 src 目录则必须在 webpack.config.js 中配置使用!
    // 配置 src 目录为 @ 目录, 这种 从 src 往下找的过程就非常 舒服了
    resolve: {
        alias: {
            '@': path.join(__dirname, './src')
        }
    }

---------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------- 第11章 插件 -------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
什么事 SPA (Single Page Application)?
    SPA 是由 一个 html  和 一堆 js 文件组成的单页面富应用前端服务, 在 html 中渲染什么东西, 完全取决于 js 的内容, 选取哪个 js 则往往会用到前端路由!

在 vue 中的路由, 就像 动态组件中 具体要加载哪个 vue 组件!

如何注册一个插件:
    注册插件格式如下:
    MinePlugin.install = function(Vue, options){
        // 全局注册组件
        Vue.component("component-name", {

        }),

        // 添加实例方法
        Vue.prototype.$Notice = function() {

        },

        // 添加全局方法或属性
        Vue.globalMethod = function() {

        },

        // 添加全局混合
        Vue.mixin({
            mounted: function() {

            }
        })
    };


如何使用插件:
    Vue.use(MinePlugin); 
    
    或者

    Vue.use(MinePlugin, {
        // 参数
    });



